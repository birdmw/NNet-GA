from population import *
from multiprocessing import Pool, cpu_count, Process

def printCreature ( creature ):
    print "  -Creature", creature
    print "  --",creature.neuronCount," neurons, ",creature.inputCount," inputs, ",creature.outputCount," outputs, ", len(creature.synapseList)," synapses."
    print "  --",creature.ELO.mu," mu, ",creature.ELO.sigma," sigma "

def printFinalOuts( population ):
    print "training outs:"
    for o in range (len(population.trainingCreature.output)):
        print population.trainingCreature.output[o].outbox
    print "best creature outs:"
    for c in range (len(population.creatureList[0].output)):
        print population.creatureList[0].output[c].outbox

if __name__ == "__main__":
    CREATURE_COUNT = 10
    NEURON_COUNT= 4
    INPUT_COUNT = 2
    OUTPUT_COUNT = 1
    CYCLES_PER_RUN = NEURON_COUNT + 1
    GENERATIONS = 2
    TRAINING_SETS = 4
    TRIALS = 10
    population = Population ( CREATURE_COUNT, NEURON_COUNT, INPUT_COUNT, OUTPUT_COUNT, CYCLES_PER_RUN )
    for G in range (GENERATIONS):
        print "GENERATION: ",G
        population.mutateBySigma()
        for s in range(TRAINING_SETS):
            population.setTrainingBools()
            population.setPuts()
            population.randomTrials( TRIALS )

        population.pruneByELO()
        printCreature(population.creatureList[0])
        population.repopulate()
    bestCreature = population.creatureList[0]
    population.setTrainingBools()
    bestCreature.run(  )
    printFinalOuts(population)


